plugins {
    id 'com.gradle.plugin-publish' version '0.18.0'
    id 'java-gradle-plugin'
}

group "io.smallrye"

if (JavaVersion.current().isJava9Compatible()) {
    compileJava.options.compilerArgs.addAll(['--release', '8'])
}
sourceSets {
    main.java.srcDirs = ['plugin/src/main/java']
    main.resources.srcDirs = ['plugin/src/main/resources']
}
compileJava {
    options.encoding = 'UTF-8'
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    api gradleApi()
    implementation "io.smallrye:jandex:3.0.0"
    implementation "io.smallrye:smallrye-graphql:${version}"
    implementation "io.smallrye:smallrye-graphql-schema-builder:${version}"
    implementation "jakarta.json.bind:jakarta.json.bind-api:2.0.0"
    implementation "org.eclipse:yasson:2.0.4"
    implementation "org.jboss.logging:jboss-logging:3.4.3.Final"

    testImplementation gradleTestKit()
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
    useJUnitPlatform()
    // multiple Gradle invocations executed from the same testing JVM cause problems, so fork
    // for each test, and make sure we only run one Gradle execution in each test
    forkEvery 1
}

javadoc {
    options.addStringOption('encoding', 'UTF-8')
}

pluginBundle {
    group = 'io.smallrye.graphql'
    website = 'http://github.com/smallrye/smallrye-graphql/'
    vcsUrl = 'https://github.com/smallrye/smallrye-graphql'
    tags = ['smallrye', 'graphql', 'microprofile']
    mavenCoordinates {
        groupId = project.group
    }
}

gradlePlugin {
    plugins {
        smallryeGraphQLPlugin {
            id = 'io.smallrye.graphql'
            implementationClass = 'io.smallrye.graphql.gradle.SmallRyeGraphQLPlugin'
            displayName = 'SmallRye: MicroProfile GraphQL Gradle Plugin'
            description = 'SmallRye: MicroProfile GraphQL Gradle Plugin'
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
